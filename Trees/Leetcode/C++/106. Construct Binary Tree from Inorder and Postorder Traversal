/*
Question Link :- https://leetcode.com/problems/construct-binary-tree-from-inorder-and-postorder-traversal/
*/



class Solution {
private:
void createMapping(vector<int>& inorder, map<int, int> &nodeToIndex, int n) {
     for (int i = 0; i < n; i++)
          nodeToIndex[inorder[i]] = i;
}

TreeNode* solve(vector<int>& postorder, vector<int>& inorder, int &index, int inorderStart, 
     int inorderEnd, int n, map<int, int> &nodeToIndex) {
    // base case
    if (index < 0 || inorderStart > inorderEnd)
        return NULL;

    int element = postorder[index--];
    TreeNode* root = new TreeNode(element);
    int position = nodeToIndex[element];

    // recursive calls
    root -> right = solve(postorder, inorder, index, position+1, inorderEnd, n, nodeToIndex);
    root -> left = solve(postorder, inorder, index, inorderStart, position-1, n, nodeToIndex);

    return root;
}



public:
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        int n = postorder.size();
        int postOrderIndex = n-1;
        map<int, int>nodeToIndex;
        createMapping(inorder, nodeToIndex, n);
        TreeNode* ans = solve(postorder, inorder, postOrderIndex, 0, n-1, n, nodeToIndex);
        return ans;
    }
};
