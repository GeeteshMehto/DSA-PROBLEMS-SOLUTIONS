/*
Question Link :- https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/
*/

class Solution {
private:
    void createMapping(vector<int> inorder, map<int, int> &nodeToIndex, int n) {
        for (int i = 0; i < n; i++) {
            nodeToIndex[inorder[i]] = i;
        }
    }
    
    TreeNode* solve(vector<int> inorder, vector<int>preorder, int &index, int inorderStart, int inorderEnd, int n, map<int, int> &nodeToIndex) {
        // base case
        if (index >= n || inorderStart > inorderEnd)
            return NULL;
        
        int element = preorder[index++];
        TreeNode* root = new TreeNode(element);
        int position = nodeToIndex[element];
        
        // recursive calls
        root -> left = solve(inorder, preorder, index, inorderStart, position-1, n, nodeToIndex);
        root -> right = solve(inorder, preorder, index, position+1, inorderEnd, n, nodeToIndex);
                    
        return root;
    }

public:
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        int n = inorder.size();
        int preOrderIndex = 0;
        map<int, int>nodeToIndex;
        createMapping(inorder, nodeToIndex, n);
        TreeNode* ans = solve(inorder, preorder, preOrderIndex, 0, n-1, n, nodeToIndex);
        return ans;
    }
};
