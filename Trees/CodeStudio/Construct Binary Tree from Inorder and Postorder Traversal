/*
Question Link :- https://www.naukri.com/code360/problems/construct-binary-tree-from-inorder-and-postorder-traversal_1266106
*/



#include <map>
void createMapping(vector<int>& inOrder, map<int, int> &nodeToIndex, int n) {
     for (int i = 0; i < n; i++)
          nodeToIndex[inOrder[i]] = i;
}

TreeNode<int>* solve(vector<int>& postOrder, vector<int>& inOrder, int &index, int inorderStart, 
     int inorderEnd, int n, map<int, int> &nodeToIndex) {
     // base case
     if (index < 0 || inorderStart > inorderEnd)
          return NULL;
     
     int element = postOrder[index--];
     TreeNode<int>* root = new TreeNode<int>(element);
     int position = nodeToIndex[element];
     
     // recursive calls
     root -> right = solve(postOrder, inOrder, index, position+1, inorderEnd, n, nodeToIndex);
     root -> left = solve(postOrder, inOrder, index, inorderStart, position-1, n, nodeToIndex);
     
     return root;
}


TreeNode<int>* getTreeFromPostorderAndInorder(vector<int>& postOrder, vector<int>& inOrder){
     int n = postOrder.size();
	int postOrderIndex = n-1;
     map<int, int>nodeToIndex;
     createMapping(inOrder, nodeToIndex, n);
     TreeNode<int>* ans = solve(postOrder, inOrder, postOrderIndex, 0, n-1, n, nodeToIndex);
     return ans;
}
