/*
Question Link :- https://www.geeksforgeeks.org/problems/merge-two-bst-s/1
*/


class Solution
{
    private:
    void inorder(Node* root, vector<int>&inorderVal) {
        if (root == NULL)
            return ;
        
        inorder(root -> left, inorderVal);
        inorderVal.push_back(root -> data);
        inorder(root -> right, inorderVal);
    }
    
    vector<int>mergeArrays(vector<int>&bst1, vector<int>&bst2) {
        vector<int>ans(bst1.size() + bst2.size());
        int i = 0, j = 0, k = 0;
        
        while(i < bst1.size() && j < bst2.size()) {
            if (bst1[i] < bst2[j]) {
                ans[k++] = bst1[i];
                i++;
            }
            else {
                ans[k++] = bst2[j];
                j++;
            }
        }
        while (i < bst1.size()) {
            ans[k++] = bst1[i];
            i++;
        }
        while (j < bst2.size()) {
            ans[k++] = bst2[j];
            j++;
        }
        return ans;
    }
    
    
    public:
    //Function to return a list of integers denoting the node 
    //values of both the BST in a sorted order.
    vector<int> merge(Node *root1, Node *root2)
    {
       vector<int>bst1, bst2;
       inorder(root1, bst1);
       inorder(root2, bst2);
       
       vector<int>mergeArray = mergeArrays(bst1, bst2);
       
       return mergeArray;
    }
};
