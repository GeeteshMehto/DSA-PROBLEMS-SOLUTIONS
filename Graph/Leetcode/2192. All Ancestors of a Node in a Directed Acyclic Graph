/*
Question Link :- https://leetcode.com/problems/all-ancestors-of-a-node-in-a-directed-acyclic-graph/
*/


class Solution {
private:
    void dfs(const vector<vector<int>>& graph, int u, int ancestor,
        vector<bool>&& seen, vector<vector<int>>& ans) {
        seen[u] = true;
        for (int i = 0; i < graph[u].size(); ++i) {
            int v = graph[u][i];
            if (seen[v])
                continue;
            ans[v].push_back(ancestor);
            dfs(graph, v, ancestor, move(seen), ans);
        }
    }

public:
    vector<vector<int>> getAncestors(int n, vector<vector<int>>& edges) {
        vector<vector<int>> ans(n);
        vector<vector<int>> graph(n);

        for (int i = 0; i < edges.size(); i++) {
        const int u = edges[i][0];
        const int v = edges[i][1];
        graph[u].push_back(v);
        }

        for (int i = 0; i < n; ++i)
        dfs(graph, i, i, vector<bool>(n), ans);

        return ans;
    }

};
