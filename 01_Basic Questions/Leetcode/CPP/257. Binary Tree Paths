/*
Question Link :- https://leetcode.com/problems/binary-tree-paths/
*/





/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
private:
    void solve(TreeNode* root, vector<string>&&path, vector<string>&ans) {
        if (root == NULL)
            return ;
        
        if (root -> left == NULL && root -> right == NULL) {
            ans.push_back(join(path) + to_string(root -> val));
            return ;
        }

        path.push_back(to_string(root -> val) + "->");
        
        solve(root -> left, move(path), ans);
        solve(root -> right, move(path), ans);
        path.pop_back();
    }

    string join(const vector<string>& path) {
        string joined;
        for (const string &s : path)
            joined += s;
        return joined;
    }
    
public:
    vector<string> binaryTreePaths(TreeNode* root) {
        vector<string>ans;
        solve(root, {}, ans);
        return ans;
    }
};
